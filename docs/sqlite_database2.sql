--
-- This is the way DB **WILL BE** organised:
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

PRAGMA foreign_keys; -- cHECKING IF FOREIGN KEY EXISTS;
PRAGMA foreign_keys = ON; -- ENFORCING FOREIGN KEYS.

DROP TABLE IF EXISTS FEED_TB;
DROP TABLE IF EXISTS NAPPY_TB;
DROP TABLE IF EXISTS NOTE_TB;
DROP TABLE IF EXISTS SLEEP_TB;
DROP TABLE IF EXISTS ENTRY_TB;

CREATE TABLE ENTRY_TB (
  _ID INTEGER PRIMARY KEY AUTOINCREMENT,
  ENTRY_TB VARCHAR2(30) NOT NULL,
  ENTRY_TS TIMESTAMP NOT NULL,
  CONSTRAINT ENTRY_TB_CK CHECK (ENTRY_TB IN ('FEED_TB', 'NOTE_TB', 'NAPPY_TB', 'SLEEP_TB'))
);
CREATE INDEX ENTRY_TB_TS_IDX ON ENTRY_TB(ENTRY_TS);

CREATE TABLE FEED_TB (
  _ID INTEGER PRIMARY KEY,
  FEED_TB VARCHAR2(30) CONSTRAINT FEED_TB_CK CHECK (FEED_TB='FEED_TB') DEFAULT('FEED_TB'),
  FEED_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  FEED_AMOUNT INTEGER CONSTRAINT FEED_AMOUNT_CK CHECK (FEED_AMOUNT > 0) NOT NULL,
  FEED_NOTE TEXT,
  CONSTRAINT FEED_ID_FK FOREIGN KEY (_ID) REFERENCES ENTRY_TB(_ID) ON DELETE CASCADE
);
CREATE INDEX FEED_TB_TS_IDX ON FEED_TB(FEED_TS);

CREATE TABLE NAPPY_TB (
  _ID INTEGER PRIMARY KEY,
  NAPPY_TB VARCHAR2(30) CONSTRAINT NAPPY_TB_CK CHECK (NAPPY_TB='NAPPY_TB') DEFAULT('NAPPY_TB'),
  NAPPY_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  NAPPY_DIRTY INTEGER NOT NULL,
  NAPPY_WET INTEGER NOT NULL,
  NAPPY_NOTE TEXT,
  CONSTRAINT NAPPY_ID_FK FOREIGN KEY (_ID) REFERENCES ENTRY_TB(_ID) ON DELETE CASCADE
);
CREATE INDEX NAPPY_TS_IDX ON NAPPY_TB(NAPPY_TS);

CREATE TABLE NOTE_TB (
  _ID INTEGER PRIMARY KEY,
  NOTE_TB VARCHAR2(30) CONSTRAINT NOTE_TB_CK CHECK (NOTE_TB='NOTE_TB') DEFAULT('NOTE_TB'),
  NOTE_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  NOTE_VALUE TEXT,
  CONSTRAINT NOTE_ID_FK FOREIGN KEY (_ID) REFERENCES ENTRY_TB(_ID) ON DELETE CASCADE
);
CREATE INDEX NOTE_TB_IDX ON NOTE_TB(NOTE_TS);

CREATE TABLE SLEEP_TB (
  _ID INTEGER PRIMARY KEY,
  SLEEP_TB VARCHAR2(30) CONSTRAINT SLEEP_TB_CK CHECK (SLEEP_TB='SLEEP_TB') DEFAULT('SLEEP_TB'),
  SLEEP_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  SLEEP_END_TS TIMESTAMP NOT NULL, -- (?)
  SLEEP_NOTE TEXT,
  CONSTRAINT SLEEP_ID_FK FOREIGN KEY (_ID) REFERENCES ENTRY_TB(_ID) ON DELETE CASCADE
);
CREATE INDEX SLEEP_TB_IDX ON SLEEP_TB(SLEEP_TS);

CREATE VIEW ENTRIES_V_ALL AS
    SELECT * FROM ENTRY_TB LEFT JOIN FEED_TB USING (_ID)
        LEFT JOIN NAPPY_TB USING(_ID)
        LEFT JOIN SLEEP_TB USING(_ID)
        LEFT JOIN NOTE_TB USING(_ID);

SELECT * FROM ENTRY_TB JOIN FEED_TB USING (_ID);

-- Inserting into FEED_TB;
BEGIN TRANSACTION;
  INSERT INTO ENTRY_TB (ENTRY_TS, ENTRY_TB) VALUES (CURRENT_TIMESTAMP, 'FEED_TB');
  INSERT INTO FEED_TB (_ID, FEED_TB, FEED_TS, FEED_AMOUNT)
    SELECT last_insert_rowid() _ID, 'FEED_TB' FEED_TB,
    (SELECT ENTRY_TS FROM ENTRY_TB WHERE _ID=LAST_INSERT_ROWID()) AS FEED_TS,
    100 AS FEED_AMOUNT;
COMMIT;

-- NAPPY: --
BEGIN TRANSACTION;
  INSERT INTO ENTRY_TB (ENTRY_TS, ENTRY_TB) VALUES (CURRENT_TIMESTAMP, 'NAPPY_TB');
  INSERT INTO NAPPY_TB (_ID, NAPPY_TB, NAPPY_TS, NAPPY_DIRTY, NAPPY_WET, NAPPY_NOTE)
    SELECT last_insert_rowid() _ID,
      'NAPPY_TB' NAPPY_TB,
      (SELECT ENTRY_TS FROM ENTRY_TB WHERE _ID=LAST_INSERT_ROWID()) AS NAPPY_TS,
      0 AS NAPPY_DIRTY,
      1 AS NAPPY_WET,
      'A NOTE' AS NAPPY_NOTE;
COMMIT;

-- NOTE: --
BEGIN TRANSACTION;
  INSERT INTO ENTRY_TB (ENTRY_TS, ENTRY_TB) VALUES (CURRENT_TIMESTAMP, 'NOTE_TB');
  INSERT INTO NOTE_TB (_ID, NOTE_TB, NOTE_TS, NOTE_VALUE)
    SELECT last_insert_rowid() _ID,
    'NOTE_TB' NOTE_TB,
    (SELECT ENTRY_TS FROM ENTRY_TB WHERE _ID=LAST_INSERT_ROWID()) AS NOTE_TS,
    'Note test' AS NOTE_VALUE;
COMMIT;

-- SLEEP: --
BEGIN TRANSACTION;
  INSERT INTO ENTRY_TB (ENTRY_TS, ENTRY_TB) VALUES (CURRENT_TIMESTAMP, 'SLEEP_TB');
  INSERT INTO SLEEP_TB (_ID, SLEEP_TB, SLEEP_TS, SLEEP_END_TS, SLEEP_NOTE)
    SELECT last_insert_rowid() _ID,
    'SLEEP_TB' SLEEP_TB,
    (SELECT ENTRY_TS FROM ENTRY_TB WHERE _ID=LAST_INSERT_ROWID()) AS SLEEP_TS,
    CURRENT_TIMESTAMP + 2 * 3600 * 1000 AS SLEEP_END_TS,
    'Note test' AS SLEEP_NOTE;
COMMIT;

SELECT * FROM ENTRY_TB;
SELECT * FROM FEED_TB;
SELECT * FROM NAPPY_TB;
SELECT * FROM NOTE_TB;
SELECT * FROM SLEEP_TB;

-- ENTRIES_ALL_VIEW: -> TODO.
--CREATE VIEW


-- CHECKING FOR ORPHANS:
SELECT _ID, ENTRY_TB FROM ENTRY_TB WHERE
    (ENTRY_TB='SLEEP_TB' AND _ID NOT IN (SELECT _ID FROM SLEEP_TB)) OR
    (ENTRY_TB='FEED_TB' AND _ID NOT IN (SELECT _ID FROM FEED_TB)) OR
    (ENTRY_TB='NAPPY_TB' AND _ID NOT IN (SELECT _ID FROM NAPPY_TB)) OR
    (ENTRY_TB='NOTE_TB' AND _ID NOT IN (SELECT _ID FROM NOTE_TB));

